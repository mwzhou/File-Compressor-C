////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ERROR TEST CASES (test cases to check for errors):
	Note: line numbers may be slightly different at time of submission (due to edits of source files)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[INPUT CHECKS]:

TEST CASE 0e: no arguments passed
	Run: ./fileCompressor

	Output:
		ERROR: Must pass inbetween 2 to 4 arguments in addition to the executable
		Program:fileCompressor.c in Function:inputCheck() on Line:487
		exit: Success
	Result:
		Terminates program


TEST CASE 0.5e: not enough arguments passed
	Run: ./fileCompressor 1

	Output:
		ERROR: Must pass inbetween 2 to 4 arguments in addition to the executable
		Program:fileCompressor.c in Function:inputCheck() on Line:487
		exit: Success
	Result:
		Terminates program
		

TEST CASE 0.75e: too many arguments
	Run: ./fileCompressor 1 2 3 4 5
	
	Output:
		ERROR: Must pass inbetween 2 to 4 arguments in addition to the executable
		Program:fileCompressor.c in Function:inputCheck() on Line:487
		exit: Success
	Result:
		Terminates program


TEST CASE 1e: multiple flags (excluding the R flag)
	Run: ./fileCompressor -b  -d /ilab/users/mwz7/Desktop/k
			or
		 ./fileCompressor -b  -c /ilab/users/mwz7/Desktop/k
		 	or
		 ./fileCompressor -c -d /ilab/users/mwz7/Desktop/k
		 	etc.
	
	Output:
		ERROR: cannot have multiple flags
		Program:fileCompressor.c in Function:inputCheck() on Line:499
		exit: Success
	Result:
		Terminates program



TEST CASE 2e: file name passed in does not exist
	Run: ./fileCompressor -c ./test.tx
		 (Note: can be any flag, just has to pass in a file that doesn't exist)

	Output:
		argument:./test.tx
		ERROR: undefined file name
		Program:fileCompressor.c in Function:inputCheck() on Line:512
		exit: No such file or directory
	Result:
		Terminates program



TEST CASE 3e: no codebook specified when running -c or d flag
	Run: ./fileCompressor -c ./test.txt
				or
		./fileCompressor -d -R ./test.txt

	Output:
		argument: ./test.txt
		ERROR: File must be specified as second to last argument if flag -c or -d. Last argument is reserved for the codebook.
		Program:fileCompressor.c in Function:inputCheck() on Line:516
		exit: Success
	Result:
		Terminates program



TEST CASE 4e: Running flag after file argument
	Run: ./fileCompressor ./testplan.txt -b
	
	Output:
		ERROR: must specify -b, -c, or -d flag before specifying file arguments!
		Program:fileCompressor.c in Function:inputCheck() on Line:511
		exit: Success
	Result:
		Terminates program


TEST CASE 5e: No flag passed in
	Run: ./fileCompressor /ilab/users/mwz7/Desktop/test ./HuffmanCodebook
	
	Output:
		ERROR: must specify -b, -c, or -d flag before specifying file arguments!
		Program:fileCompressor.c in Function:inputCheck() on Line:511
		exit: Success
	Result:
		Terminates program



TEST CASE 5.5e: Only -R flag passed in (assuming other arguments are fine)
	Run: -R ./fileCompressor /ilab/users/mwz7/Desktop/test
	
	Output:
		ERROR: must specify -b, -c, or -d flag before specifying file arguments!
		Program:fileCompressor.c in Function:inputCheck() on Line:511
		exit: Success
	Result:
		Terminates program
		


TEST CASE 6e: Multiple -R flags passed in (assuming other arguments are fine)
	Run: ./fileCompressor -R -b -R ./testplan.txt
	
	Output:
		ERROR: cannot have multiple '-R' flags
		Program:fileCompressor.c in Function:inputCheck() on Line:487
		exit: Success
	Result:
		Terminates program

		
		
TEST CASE 7e: Non b,c,or d flag passed in (assuming other arguments are fine)
	Run: ./fileCompressor -q /ilab/users/mwz7/Desktop/test
		 (Note -<any char other than b c or d> returns the same error as well)
	
	Output:
		ERROR: must specify -b, -c, or -d flag before specifying file arguments!
		Program:fileCompressor.c in Function:inputCheck() on Line:511
		exit: Success
	Result:
		Terminates program



TEST CASE 8e: No file passed in (assuming other arguments are fine)
	Run: ./fileCompressor -b -R
	
	Output:
		ERROR: must give in a path or a file as an argument
		Program:fileCompressor.c in Function:inputCheck() on Line:513
		exit: Success
	Result:
		Terminates program



TEST CASE 9e: passing in two files with -b flag
	Run:
		./fileCompressor -b ./testplan.txt ./testplan.txt
	
	Output:
		ERROR: Just a single file must be specified as last argument if flag -b. Can't have multiple files/flags
		Program:fileCompressor.c in Function:inputCheck() on Line:517
		exit: Success
	Result:
		Terminates program



TEST CASE 10e: passing in a DIRECTORY into an argument WITHOUT the -R flag
	Run: ./fileCompressor -b ./Rec1/
	
	Output:
		ERROR: cannot pass in directory without -R flag
		Program:fileCompressor.c in Function:inputCheck() on Line:539
		exit: Success
	Result:
		Terminates program


TEST CASE 11e: passing in multiple files for -c or -d flag where the last file is NOT a huffman codebook
	Run: ./fileCompressor -b ./HuffmanCodebook ./test.txt
	
	Output:
		file:./test.txt
		ERROR: doesn't match the correct format of HuffmanCodebook
		Program:structures.c in Function:buildCodebookTree() on Line:370
		return: Success

		ERROR: tried to build tree from codebook
		Program:fileCompressor.c in Function:inputCheck() on Line:551
		exit: Success

	Result:
		Terminates program
		


TEST CASE 11.5e: Passing in HuffmanCodebook that does NOT meet the required format
	Run: ./fileCompressor -c ./test.txt ./HuffmanCodebook
	Files:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook] (doesn't match format):
		\The
		10sxsx011101
		<new Line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Output:
		file:./HuffmanCodebook
		ERROR: doesn't match the correct format of HuffmanCodebook
		Program:structures.c in Function:buildCodebookTree() on Line:370
		return: Success

		ERROR: tried to build tree from codebook
		Program:fileCompressor.c in Function:inputCheck() on Line:524
		exit: Success

	Result:
		Terminates program
			
	
			
TEST CASE 11.75e: Passing in empty HuffmanCodebook
	Run: ./fileCompressor -c ./test.txt ./HuffmanCodebook
	Files:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook] (empty):
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Output:
		file:./HuffmanCodebook
		ERROR: doesn't match the correct format of HuffmanCodebook
		Program:structures.c in Function:buildCodebookTree() on Line:370
		return: Success

		ERROR: tried to build tree from codebook
		Program:fileCompressor.c in Function:inputCheck() on Line:524
		exit: Success

	Result:
		Terminates program
		
	
		
-------------------------------------------------------------------------------------------------------------------		
[OTHER ERROR CHECKS]:


TEST CASE 12e: reading a file with no read permission
	Run: ./fileCompressor  -b /ilab/users/mwz7/Desktop/k/no_read_p.txt 
		(no_read_p.txt has no read permissions)
		(can run any flag)
	
	Output:		 
		ERROR: error opening file (O_RDONLY)
		Program:fileHelperMethods.c in Function:readFile() on Line:44
		return: Permission denied

		ERROR: error reading file name
		Program:fileCompressor.c in Function:buildFrequencyAVL() on Line:101
		return: Permission denied
	Result:
		flag is not run



TEST CASE 13e: writing a file with no write permission. flag: -b
	Run: ./fileCompressor -b ./test.txt 
		 (HuffmanCodebook already exists in directory and has no write permissions)
		 
	Output:	
		file:HuffmanCodebook
		ERROR: tried to open file flags: (O_WRONLY|O_CREAT|O_TRUNC)
		Program:fileHelperMethods.c in Function:openFileW() on Line:75
		return: Permission denied

		ERROR: open write
		Program:fileCompressor.c in Function:buildcodebook() on Line:46
		return: Permission denied	 
	Result:
		HuffmanCodebook is not overwritten
	
		
	
TEST CASE 13.5e: writing a file with no write permission. flag: -c
	Run: ./fileCompressor -c ./test.txt ./HuffmanCodebook
		 (test.hcz already exists and has no write permissions)	

	Output:
		ERROR: tried to open file flags: (O_WRONLY|O_CREAT|O_TRUNC)
		Program:fileHelperMethods.c in Function:openFileW() on Line:75
		return: Permission denied

		ERROR: open write
		Program:fileCompressor.c in Function:compress() on Line:201
		return: Permission denied
	Result:
		test.hcz is not overwritten

	Remarks: 
		note -d is simillar if the file name to write to is already created and has no write permission
		
		

TEST CASE 14e: Codebook does not contain all tokens in file. flag: -c
	Run: ./fileCompressor -c ./test.txt ./HuffmanCodebook
	Files:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook]:
		/
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[test.txt]:
		The only aspect that really matters with the codebook is that each token has its own unique bit sequence.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Output:
		token:"The" in file:/ilab/users/mwz7/Desktop/Asst2-master/test.txt
		ERROR: token doesn't exist in codebook, will not create compressed file
		Program:fileCompressor.c in Function:compress() on Line:231
		return: Success
	Result:
		file "test.txt.hcz" is deleted.



TEST CASE 14.5: Codebook does not contain the space token but file has a space in it. flag: -c
	Run: ./fileCompressor -c ./test.txt ./HuffmanCodebook
	Files:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook] (missing space token):
		\
		10000	own
		10001	only
		10010	matters
		10011	its
		10100	the
		10101	is
		10110	each
		10111	codebook
		11000	bit
		11001	\n
		1101	that
		111000	The
		111001	with
		111010	unique
		111011	token
		111100	aspect
		111101	has
		111110	sequence.
		111111	really
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[test.txt]:
		The only aspect that really matters with the codebook is that each token has its own unique bit sequence.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
	Output:		
		removed file:/ilab/users/mwz7/Desktop/Asst2/test.txt.hcz
		token:"\S" in file:/ilab/users/mwz7/Desktop/Asst2/test.txt
		ERROR: token doesn't exist in codebook
		Program:fileCompressor.c in Function:compress() on Line:256
		return: Success

	Result:
		file "test.txt.hcz" is deleted



TEST CASE 15e: Codebook does not contain all tokens in file flag: -d
	Run: ./fileCompressor -d ./a.hcz ./HuffmanCodebook
	Files:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook]:
		/
		10000	own
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[a.txt.hcz]:
		11100
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Output:
		removed file:/ilab/users/mwz7/Desktop/Asst2/a
		ERROR: reached end of file, could not find token for encoding
		Program:fileCompressor.c in Function:decompress() on Line:335
		return: Success
	Result:
		/ilab/users/mwz7/Desktop/Asst2/a is deleted



TEST CASE 16e: Try to decompress a non-compressed file (does not end with .hcz)
	Run: ./fileCompressor -d /ilab/users/mwz7/Desktop/testCases/test.txt ./HuffmanCodebook
	
	Output:
		file:/ilab/users/mwz7/Desktop/testCases/test.txt
		ERROR: file must end with .hcz
		Program:fileCompressor.c in Function:decompress() on Line:281
		return: Success
	Result:
		does not decompress.





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
REGULAR TEST CASES
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TEST CASE 0: run -b, -c, and -d on an empty file
	Run:
		./fileCompressor -b ./empty.txt
		
		./fileCompressor -c ./empty.txt ./HuffmanCodebook
		
		now move the original empty.txt to a different directory (to avoid being overwritten by decompress)
		
		./fileCompressor -d ./empty.hcz ./HuffmanCodebook
	
	Files/Directories:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[empty.txt] (empty):
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Output: 
		none
	
	Result: 
		runs as expected. 100% match from original file and decompressed file in the end.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook](created in executable directory):
		\
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[empty.txt.hcz] (empty):
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[empty.txt](decompressed version): (empty):
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Remarks:
		Technically an empty file is valid, so the Huffman Codebook wouldn't be empty, it just wouldn't have any tokens.





TEST CASE 0.5: run all flags with -R flag on an empty directory
	Run: 
		./fileCompressor -b -R /ilab/users/mwz7/Desktop/empty_dir/
		
		./fileCompressor -c -R /ilab/users/mwz7/Desktop/empty_dir/ ./HuffmanCodebook				
		
		./fileCompressor -d -R /ilab/users/mwz7/Desktop/empty_dir/ ./HuffmanCodebook



	Files/Directories:
		===================================================================================
		DIRECTORY - empty_dir:
			contents: (nothing)
		===================================================================================
	
	Results:
		Runs as expected. empty_dir is still empty since there's no files to compress/decompress.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook](created in executable directory):
		\
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		===================================================================================
		DIRECTORY - empty_dir:
			contents: (nothing)
		===================================================================================

	Remarks:
		Simillar to test case 0, the Huffman Codebook would still exist, it's just empty.




TEST CASE 1: run flags in any order on a random file 
	Run:
		./fileCompressor -b -R <file_name>
		./fileCompressor -d -R <file_name>
		./fileCompressor -R -c <file_name> ./Huffman Codebook
	
	Remarks:
		as long as all arguments are the same in the format specified, the order of the flags doesn't matter. 
		They are treated the same and have the same exact result.




TEST CASE 2: run all flags on a file with a single word
	Run: 
		./fileCompressor -b /ilab/users/mwz7/Desktop/k/single_word.pdf
		
		./fileCompressor -c /ilab/users/mwz7/Desktop/k/single_word.pdf ./HuffmanCodebook
		
		now move the original single_word.pdf to a  different directory (to avoid being overwritten by decompress)				
		
		./fileCompressor -d /ilab/users/mwz7/Desktop/k/single_word.hcz ./HuffmanCodebook


	Files/Directories:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[single_word.pdf] (in DIR /ilab/users/mwz7/Desktop/k/): 
		hello
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Results:
		Runs as expected.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook](created in executable directory):
		\
		0	\n
		1	hello
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[single_word.pdf.hcz](created in /ilab/users/mwz7/Desktop/k/):
		10
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[single_word,pdf](created in /ilab/users/mwz7/Desktop/k/):
		hello
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	Remarks:
		Note: Test Case 2 is also testing for a different file extension other than .txt and also running a file in a different directory other than the executable.
		Note: the Huffman Codebook accounts for the \n at the end of a file from the text editor. The decompressed file is still exactly the same.


TEST CASE 3: run all flags on a file with NO delimiters. Also testing compressing a .hcz file
	Run: 
		./fileCompressor -b ./testCases/test3.hcz
		
		./fileCompressor -c ./testCases/test3.hcz ./HuffmanCodebook
		
		now move the original file test.txt.hcz  to a  different directory (to avoid being overwritten by decompress)				
		
		./fileCompressor -d ./testCases/test3.hcz.hcz ./HuffmanCodebook
		
	Files/Directories:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[test.txt.hcz] (in  DIR ./testCases/)
		11001001011000010111101000001011111001111001101110010110110101100010100001101001100010110101001110101111010010111110111111001100010110100100011111101000001001101011101111001011011001101011101000111100001010011100010
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Results:
		Even without a delimiter, it compresses and decompresses as expected. The decompressed file has a 100% match with the original file.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook](created in executable directory):
		\
		0	11001001011000010111101000001011111001111001101110010110110101100010100001101001100010110101001110101111010010111110111111001100010110100100011111101000001001101011101111001011011001101011101000111100001010011100010
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[test.txt.hcz.hcz](created in ./testCases/):
		0
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[test.txt.hcz] (new decompressed file created in ./testCases)
		11001001011000010111101000001011111001111001101110010110110101100010100001101001100010110101001110101111010010111110111111001100010110100100011111101000001001101011101111001011011001101011101000111100001010011100010
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		
		
TEST CASE 4: run all flags on a FILE but pass in -R flag
	Run: 
		./fileCompressor -b -R /ilab/users/mwz7/Desktop/k/single_word.pdf
			Output:
				passed in -R flag but only passed in a REGULAR file, will run flag as if NOT recursive
		
		./fileCompressor -R -c /ilab/users/mwz7/Desktop/k/single_word.pdf ./HuffmanCodebook
			Output:
				passed in -R flag but only passed in a REGULAR file, will run flag as if NOT recursive	
			
		now move the original single_word.pdf to a  different directory (to avoid being overwritten by decompress)	
							
		./fileCompressor -R -d /ilab/users/mwz7/Desktop/k/single_word.hcz ./HuffmanCodebook
			Output:
				passed in -R flag but only passed in a REGULAR file, will run flag as if NOT recursive
					
	Files: 
		same as Test Case 2
		
	Results:
		runs as expected.
		same as Test Case 2
		
	Remarks:
		If user passes in a single word but also the R flag, the program treats it as if no R flag in the first place.




TEST CASE 5: run all flags on a file of words with just a single delimiter (some words have duplicates). File has a large number of words.
	
	Run:
		./fileCompressor -b ./testCases/test.txt
		
		./fileCompressor -c ./testCases/test.txt ./HuffmanCodebook
		
		now move the original test.txt to a  different directory (to avoid being overwritten by decompress)	
		
		./fileCompressor -d ./testCases/test.hcz ./HuffmanCodebook
			
	Files:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[test.txt] (in DIR /testCases/):
		The only aspect that really matters with the codebook is that each token has its own unique bit sequence. So long as each token has this, then it does not matter which file or location you swap out the tokens for their codes are. Creating the Huffman Tree just ensures that this happens and to create it you need the frequencies of each token, but the frequencies themselves are just to ensure you end up with the smallest possible unique bit sequences for all tokens. Whether using one file or multiple files, you record each token and its corresponding frequency, then using this you can now create and use the codebook on all the files you just got the tokens from.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Results:
		Everything runs as expected. The end-result decompressed file has a 100% match with the original file.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook] (created in same directory as executable):
		\
		0	\S
		1000000	smallest
		10000010	Creating
		10000011	Huffman
		100001	that
		100010	just
		100011	token
		10010	you
		100110	and
		10011100	The
		10011101	\n
		10011110	but
		10011111	use
		10100000	frequency,
		10100001	their
		10100010	from.
		10100011	themselves
		10100100	can
		10100101	got
		10100110	this,
		10100111	happens
		10101000	token,
		10101001	is
		10101010	tokens.
		10101011	codes
		10101100	up
		10101101	which
		10101110	Tree
		10101111	corresponding
		10110000	location
		10110001	sequence.
		10110010	record
		10110011	really
		10110100	long
		10110101	own
		10110110	matter
		10110111	are
		10111000	only
		10111001	one
		10111010	on
		10111011	of
		10111100	now
		10111101	not
		10111110	does
		10111111	matters
		11000000	multiple
		11000001	need
		11000010	So
		11000011	Whether
		11000100	are.
		11000101	end
		11000110	ensure
		11000111	as
		11001000	ensures
		11001001	out
		11001010	aspect
		11001011	files
		11001100	possible
		11001101	swap
		11001110	files,
		11001111	sequences
		1101000	frequencies
		1101001	it
		1101010	using
		1101011	its
		1101100	has
		1101101	or
		1101110	bit
		1101111	unique
		1110000	codebook
		1110001	this
		1110010	for
		1110011	with
		1110100	file
		1110101	tokens
		1110110	then
		1110111	create
		1111000	to
		1111001	all
		111101	each
		11111	the
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[test.txt.hcz] (created in /testCases/):
		
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[test.txt] (created in /testCases/):
		The only aspect that really matters with the codebook is that each token has its own unique bit sequence. So long as each token has this, then it does not matter which file or location you swap out the tokens for their codes are. Creating the Huffman Tree just ensures that this happens and to create it you need the frequencies of each token, but the frequencies themselves are just to ensure you end up with the smallest possible unique bit sequences for all tokens. Whether using one file or multiple files, you record each token and its corresponding frequency, then using this you can now create and use the codebook on all the files you just got the tokens from.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		
		

TEST CASE 6: run all flags on a file with few words and with multiple delimiters
	Run:
		./fileCompressor -b ./testCases/test2.txt 
		
		./fileCompressor -c ./testCases/test2.txt ./HuffmanCodebook
		
		now move the original test2.txt to a  different directory (to avoid being overwritten by decompress)	
		
		./fileCompressor -d ./testCases/test2.hcz ./HuffmanCodebook
		
	Files:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[test2.txt] (in DIR /testCases/):
		I'm Happy and 	"I know it
		So
		Clap you're hands? 
			If you're
		"Happy and you \know it"
		\Do a dance
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
	Results:
		Everything runs as expected. The end-result decompressed file has a 100% match with the original file.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook] (created in same directory as executable):
		\
		0000	and
		00010	a
		000110	Clap
		000111	Do
		0010	\1
		0011	\2
		010	\n
		0110	you
		011100	dance
		011101	hands
		011110	\?
		011111	If
		10	\S
		110000	m
		110001	So
		11001	I
		11010	re
		11011	it
		11100	know
		11101	\e
		11110	Happy
		11111	\t
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[test2.txt.hcz] (in DIR /testCases/): 
		11001001011000010111101000001011111001111001101110010110110101100010100001101001100010110101001110101111010010111110111111001100010110100100011111101000001001101011101111001011011001101011101000111100001010011100010
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[test2.txt] (in DIR /testCases/): 
		I'm Happy and 	"I know it
		So
		Clap you're hands? 
			If you're
		"Happy and you \know it"
		\Do a dance
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		
		

TEST CASE 7: run all flags on just a file of delimiters (no words)
	Run:
		./fileCompressor -b ./testCases/delims.txt
		
		./fileCompressor -c ./testCases/delims.txt ./HuffmanCodebook
		
		now move the original delims.txt to a  different directory (to avoid being overwritten by decompress)	
		
		./fileCompressor -d ./testCases/delims.txt ./HuffmanCodebook
	
	Files:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
		[delims.txt] (in DIR /testCases/): 
		
 	 	\







		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	
	Results:
		Everything runs as expected. The end-result decompressed file has a 100% match with the original file.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook] (created in executable directory):
		\
		00	\S
		010	\e
		011	\t
		1	\n
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[delims.txt.hcz] (created in /testCases/):
		100011000110101111111
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
		[delims.txt] (created in /testCases/): 
		
 	 	\







		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



		
TEST CASE 8: The first four pages of harry potter and the sorcerers stone (very large text file)
	Run:
		./fileCompressor -b ./testCases/test3.txt
		
		./fileCompressor -c ./testCases/test3.txt ./HuffmanCodebook
		
		now move the original test3.txt to a  different directory (to avoid being overwritten by decompress)	
		
		./fileCompressor -d ./testCases/test3.hcz ./HuffmanCodebook
	
	Files:
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	[test3.txt]
	Harry Potter and the Sorcerer's Stone
	CHAPTER ONE
	THE BOY WHO LIVED
	Mr. and Mrs. Dursley, of number four, Privet Drive, were proud to say
	that they were perfectly normal, thank you very much. They were the last
	people you'd expect to be involved in anything strange or mysterious,
	because they just didn't hold with such nonsense.
	Mr. Dursley was the director of a firm called Grunnings, which made
	drills. He was a big, beefy man with hardly any neck, although he did
	have a very large mustache. Mrs. Dursley was thin and blonde and had
	nearly twice the usual amount of neck, which came in very useful as she
	spent so much of her time craning over garden fences, spying on the
	neighbors. The Dursleys had a small son called Dudley and in their
	opinion there was no finer boy anywhere.
	The Dursleys had everything they wanted, but they also had a secret, and
	their greatest fear was that somebody would discover it. They didn't
	think they could bear it if anyone found out about the Potters. Mrs.
	Potter was Mrs. Dursley's sister, but they hadn't met for several years;
	in fact, Mrs. Dursley pretended she didn't have a sister, because her
	sister and her good-for-nothing husband were as unDursleyish as it was
	possible to be. The Dursleys shuddered to think what the neighbors would
	say if the Potters arrived in the street. The Dursleys knew that the
	Potters had a small son, too, but they had never even seen him. This boy
	was another good reason for keeping the Potters away; they didn't want
	Dudley mixing with a child like that.
	When Mr. and Mrs. Dursley woke up on the dull, gray Tuesday our story
	starts, there was nothing about the cloudy sky outside to suggest that
	strange and mysterious things would soon be happening all over the
	country. Mr. Dursley hummed as he picked out his most boring tie for
	work, and Mrs. Dursley gossiped away happily as she wrestled a screaming
	Dudley into his high chair.
	None of them noticed a large, tawny owl flutter past the window.
	At half past eight, Mr. Dursley picked up his briefcase, pecked Mrs.
	Dursley on the cheek, and tried to kiss Dudley good-bye but missed,
	2
	because Dudley was now having a tantrum and throwing his cereal at the
	walls. "Little tyke," chortled Mr. Dursley as he left the house. He got
	into his car and backed out of number four's drive.
	It was on the corner of the street that he noticed the first sign of
	something peculiar -- a cat reading a map. For a second, Mr. Dursley
	didn't realize what he had seen -- then he jerked his head around to
	look again. There was a tabby cat standing on the corner of Privet
	Drive, but there wasn't a map in sight. What could he have been thinking
	of? It must have been a trick of the light. Mr. Dursley blinked and
	stared at the cat. It stared back. As Mr. Dursley drove around the
	corner and up the road, he watched the cat in his mirror. It was now
	reading the sign that said Privet Drive -- no, looking at the sign; cats
	couldn't read maps or signs. Mr. Dursley gave himself a little shake and
	put the cat out of his mind. As he drove toward town he thought of
	nothing except a large order of drills he was hoping to get that day.
	But on the edge of town, drills were driven out of his mind by something
	else. As he sat in the usual morning traffic jam, he couldn't help
	noticing that there seemed to be a lot of strangely dressed people
	about. People in cloaks. Mr. Dursley couldn't bear people who dressed in
	funny clothes -- the getups you saw on young people! He supposed this
	was some stupid new fashion. He drummed his fingers on the steering
	wheel and his eyes fell on a huddle of these weirdos standing quite
	close by. They were whispering excitedly together. Mr. Dursley was
	enraged to see that a couple of them weren't young at all; why, that man
	had to be older than he was, and wearing an emerald-green cloak! The
	nerve of him! But then it struck Mr. Dursley that this was probably some
	silly stunt -- these people were obviously collecting for something...
	yes, that would be it. The traffic moved on and a few minutes later, Mr.
	Dursley arrived in the Grunnings parking lot, his mind back on drills.
	Mr. Dursley always sat with his back to the window in his office on the
	ninth floor. If he hadn't, he might have found it harder to concentrate
	on drills that morning. He didn't see the owls swoop ing past in broad
	daylight, though people down in the street did; they pointed and gazed
	open- mouthed as owl after owl sped overhead. Most of them had never
	seen an owl even at nighttime. Mr. Dursley, however, had a perfectly
	normal, owl-free morning. He yelled at five different people. He made
	several important telephone calls and shouted a bit more. He was in a
	very good mood until lunchtime, when he thought he'd stretch his legs
	and walk across the road to buy himself a bun from the bakery.
	3
	He'd forgotten all about the people in cloaks until he passed a group of
	them next to the baker's. He eyed them angrily as he passed. He didn't
	know why, but they made him uneasy. This bunch were whispering
	excitedly, too, and he couldn't see a single collecting tin. It was on
	his way back past them, clutching a large doughnut in a bag, that he
	caught a few words of what they were saying.
	"The Potters, that's right, that's what I heard yes, their son, Harry"
	Mr. Dursley stopped dead. Fear flooded him. He looked back at the
	whisperers as if he wanted to say something to them, but thought better
	of it.
	He dashed back across the road, hurried up to his office, snapped at his
	secretary not to disturb him, seized his telephone, and had almost
	finished dialing his home number when he changed his mind. He put the
	receiver back down and stroked his mustache, thinking... no, he was
	being stupid. Potter wasn't such an unusual name. He was sure there were
	lots of people called Potter who had a son called Harry. Come to think
	of it, he wasn't even sure his nephew was called Harry. He'd never even
	seen the boy. It might have been Harvey. Or Harold. There was no point
	in worrying Mrs. Dursley; she always got so upset at any mention of her
	sister. He didn't blame her -- if he'd had a sister like that... but all
	the same, those people in cloaks...
	He found it a lot harder to concentrate on drills that afternoon and
	when he left the building at five o'clock, he was still so worried that
	he walked straight into someone just outside the door.
	"Sorry," he grunted, as the tiny old man stumbled and almost fell. It
	was a few seconds before Mr. Dursley realized that the man was wearing a
	violet cloak. He didn't seem at all upset at being almost knocked to the
	ground. On the contrary, his face split into a wide smile and he said in
	a squeaky voice that made passersby stare, "Don't be sorry, my dear sir,
	for nothing could upset me today! Rejoice, for You-Know-Who has gone at
	last! Even Muggles like yourself should be celebrating, this happy,
	happy day!"
	And the old man hugged Mr. Dursley around the middle and walked off.
	Mr. Dursley stood rooted to the spot. He had been hugged by a complete
	stranger. He also thought he had been called a Muggle, whatever that
	was. He was rattled. He hurried to his car and set off for home, hoping
	4
	he was imagining things, which he had never hoped before, because he
	didn't approve of imagination.
	As he pulled into the driveway of number four, the first thing he saw --
	and it didn't improve his mood -- was the tabby cat he'd spotted that
	morning. It was now sitting on his garden wall. He was sure it was the
	same one; it had the same markings around its eyes.
	"Shoo!" said Mr. Dursley loudly. The cat didn't move. It just gave him a
	stern look. Was this normal cat behavior? Mr. Dursley wondered. Trying
	to pull himself together, he let himself into the house. He was still
	determined not to mention anything to his wife.
	Mrs. Dursley had had a nice, normal day. She told him over dinner all
	about Mrs. Next Door's problems with her daughter and how Dudley had
	learned a new word ("Won't!"). Mr. Dursley tried to act normally. When
	Dudley had been put to bed, he went into the living room in time to
	catch the last report on the evening news:
	"And finally, bird-watchers everywhere have reported that the nation's
	owls have been behaving very unusually today. Although owls normally
	hunt at night and are hardly ever seen in daylight, there have been
	hundreds of sightings of these birds flying in every direction since
	sunrise. Experts are unable to explain why the owls have suddenly
	changed their sleeping pattern." The newscaster allowed himself a grin.
	"Most mysterious. And now, over to Jim McGuffin with the weather. Going
	to be any more showers of owls tonight, Jim?"
	"Well, Ted," said the weatherman, "I don't know about that, but it's not
	only the owls that have been acting oddly today. Viewers as far apart as
	Kent, Yorkshire, and Dundee have been phoning in to tell me that instead
	of the rain I promised yesterday, they've had a downpour of shooting
	stars! Perhaps people have been celebrating Bonfire Night early -- it's
	not until next week, folks! But I can promise a wet night tonight."
	Mr. Dursley sat frozen in his armchair. Shooting stars all over Britain?
	Owls flying by daylight? Mysterious people in cloaks all over the place?
	And a whisper, a whisper about the Potters...
	Mrs. Dursley came into the living room carrying two cups of tea. It was
	no good. He'd have to say something to her. He cleared his throat
	nervously. "Er -- Petunia, dear -- you haven't heard from your sister
	lately, have you?"
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Results:
		Everything runs as expected. The end-result decompressed file has a 100% match with the original file.
		Note: too large to copy and paste results, but a text matcher returned a 100% match.




TEST CASE 9: Runs all flags with -R flag on a DIRECTORY with multiple files but no subdirectories
	Run:
		./fileCompressor -b -R /ilab/users/mwz7/Desktop/mult
		
		./fileCompressor -R -c /ilab/users/mwz7/Desktop/mult ./HuffmanCodebook 
		
		now move all original txt files to a different directory (to avoid being overwritten by decompress)	
		
		./fileCompressor -d -R  /ilab/users/mwz7/Desktop/mult ./HuffmanCodebook 

	Files:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[a.txt] (in DIR /mult/)
		hello my name
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[b.txt] (in DIR /mult/)
		I can sing!
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[c.txt] (in DIR /mult/)
		wow hello sing
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	Results:
		runs as expected
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook] (created in executable directory):
		\
		00	\n
		0100	sing
		0101	sing!
		0110	name
		0111	wow
		100	hello
		1010	my
		10110	I
		10111	can
		11	\S
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[a.txt.hcz] (in DIR /mult/)
		10011101011011000
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[a.txt.hcz] (in DIR /mult/)
		10110111011111010100
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[a.txt.hcz] (in DIR /mult/)
		01111110011010000
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		(copying all files would take too much space)
		All decompressed files match their original files




TEST CASE 10: Tests recursive flag on a directory with each subdirectory holding a single file
	Run:
		./fileCompressor -b -R ./Rec1
		
		./fileCompressor -c -R ./Rec1 ./HuffmanCodebook
		
		now move all original txt files to a different directory (to avoid being overwritten by decompress)
		
		./fileCompressor -R -d ./Rec1 ./HuffmanCodebook

	Files:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		IN ./Rec1/test.txt:
		Are you	in the 	super Day For prudntial?
		Do you	
		think
		Competition

		Committe is goin to work out?	 Are we even going to
		Competition
		this year?
		I hope this works	out well because there was a lot of effort	put into it.
		What do	you
		think?
		To the people 	at the back of the row
		If you are short	
		please come to the front!!! We would	like to ee faces everyone!!?
		He said "I like pie very much, but no worms"
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		IN ./Rec1/Rec2/test.txt:
		yoy yo	###1ljfj 
		hdgio dios powkf jj?gkfugiud if skg if kjfs if jhgg if ' fuuifighf' dghfhgfj"dijigld'guhfjhgjkfn dlhgj;djgjgjk/dhfuhdgj
		Prnjal suckslfjdg glfdgfj dljfsjhe does not do any 	work ?d/////fgf what is wrong with him'udhgh"hdhfkz=
		fjhusu ddugupdj /jsi idoigimjfgo$idiog 8fhglkkl&kjgkjldkg kdfajd 	ghfg jfljjfkfl!jkjfglls dkjgojsf )djgkljklcj(ljfkgjkj)lkjgkl'huih"
		we are a;; in this togetherrrr kljjlk 'gijg" ujhfgj[jdgjg]dghgkj	hfhggkljf doioer lurtj riru pranjal
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		IN ./Rec1/Rec2/Rec3/test.txt:
		dhrishti woo dhrishti ' dghg" jd	 dhrishti ffkjgk I hfifg rhea fjjkdjfjsd aarush /dfdjf/ ssri/ riyaldjklfklf'diufjkdh"hfjkd
			hdjfhdk ^fkdkkl 'dfhdh"hhfjalj ]fhdhfk/jdkjfjd/hfdkjdh|kfhkhddkl\ndfjd&djkfkldhdkfl; ldkjlkfdldsf/ dfidhlk \dhfdjfl 'dyfdhk"iodflkj
		dhrishti jjdfl;l kldkfl; 8lkdfkdj*kldfkl /djfkld	jdfjkl\djfmed'jfialk"hdfdkj dio
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		IN ./Rec1/Rec2/Rec3/Rec4/test.txt:
		Hi
		#&Y89 F%E4532	r5T&*Q*
		GY7g67	t&*YFg9 t	
		 u	TIOJN //
		aND TO YOU"'
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Results:
		(copying all files would take too much space)
		Everything runs as expected when run-line command is correct. The end-result decompressed file has a 100% match with the original file.




TEST CASE 11: Tests recursive flag on a directory with each directory having multiple subdirectories and each subdirectory having multiple files
	Run:
		./fileCompressor -b -R ./r1/
		
		./fileCompressor -R -c ./r1/ ./HuffmanCodebook
		
		now move all original txt files to a different directory (to avoid being overwritten by decompress)
		
		./fileCompressor -d -R ./r1/ ./HuffmanCodebook


	Files/Directories:
			===================================================================================
			[DIRECTORY - r1]: ./r1/
				> [dir] r2
				> [dir] r2.5
			===================================================================================
			===================================================================================
			[DIRECTORY - r2]: ./r1/r2
				> hi.txt
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					[hi.txt]
					hi
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			===================================================================================
			===================================================================================
			[DIRECTORY - r2.5]: ./r1/r2.5
				> [dir] r3.5
				> [dir] r3.75
				> r3f.txt
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					[r3f.txt]
					r3f.txt
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
				> r35f.txt
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					[r35f.txt]
					r35f.txt
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			===================================================================================
			===================================================================================
			[DIRECTORY - r3.75]: ./r1/r2.5/r3.75
			 	(empty)
			===================================================================================
			===================================================================================
			[DIRECTORY - r3.5]: ./r1/r2.5/r3.5
				> [dir] r3
			===================================================================================
			===================================================================================
			[DIRECTORY - r3]: ./r1/r2.5/r3.5/r3
				> maybe.txt
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					[maybe.txt]
					maybe
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
				> no.txt
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					[no.txt]
					no
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~				
				> yes.txt
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					[yes.txt]
					yes
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~				
			===================================================================================
		
	Results:
		runs as expected. all files are written in their correct directory. 100% match with each original file.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook] (created in executable directory):
		\
		000	no
		001	maybe
		0100	hi
		0101	yes
		0110	r3f.txt
		0111	r35.txt
		1	\n
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		(Note: won't copy the rest of the results since it takes up a considerable amount of space, but it works)
		
		
		
		
TEST CASE 12: test a sequence of nested files where there is a single file at the very end
	Run:
		./fileCompressor -b -R ./nest/
		
		./fileCompressor -R -c ./nest/ ./HuffmanCodebook
		
		now move all meow.txt to a different directory (to avoid being overwritten by decompress)
		
		./fileCompressor -R -d ./nest/ ./HuffmanCodebook


	Files/Directories:
			===================================================================================
			[DIRECTORY]: ./nest/
				> [dir] nest1
			===================================================================================		
			===================================================================================
			[DIRECTORY]: ./nest/nest1
				> [dir] nest2
			===================================================================================				
			===================================================================================
			[DIRECTORY]: ./nest/nest1/nest2
				> [dir] nest3
			===================================================================================			
			===================================================================================
			[DIRECTORY]: ./nest/nest1/nest2/nest3
				> [dir] nest4
			===================================================================================						
			===================================================================================
			[DIRECTORY]: ./nest/nest1/nest2/nest3/nest4
				> meow.txt
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					[meow.txt]
					mwow
					~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~					
			===================================================================================				
	
	Results:
		runs as expected. all files are written in their correct directory. 100% match with each original file.
		It goes through all directories and reaches "meow.txt".
		
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[HuffmanCodebook] (created in ./):
		\
		0	\n
		1	mwow
		<new line>
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[meow.txt.hcz] (created in ./nest/nest1/nest2/nest3/nest4):
		10
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[meow.txt] (created in ./nest/nest1/nest2/nest3/nest4):
		mwow
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		(Note: won't copy the enitre directory since it takes up a considerable amount of space, but it works)		
				




TEST CASE 13: the entire ascii table and extended ascii table (to see if any printable characters cause an issue)
	Run:
		./fileCompressor -b ./tc/ascii2
	
		./fileCompressor -c ./tc/ascii2 ./HuffmanCodebook
		
		move ascii2 to another directory
		
		./fileCompressor -d ./tc/ascii2.hcz ./HuffmanCodebook

	Files:
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		[ascii2] (original)
		ASCII, stands for American Standard Code for Information Interchange. It's a 7-bit character code where every single bit represents a unique character. On this webpage you will find 8 bits, 256 characters, ASCII table according to Windows-1252 (code page 1252) which is a superset of ISO 8859-1 in terms of printable characters. In the range 128 to 159 (hex 80 to 9F), ISO/IEC 8859-1 has invisible control characters, while Windows-1252 has writable characters. Windows-1252 is probably the most-used 8-bit character encoding in the world.
		ASCII control characters (character code 0-31)
		The first 32 characters in the ASCII-table are unprintable control codes and are used to control peripherals such as printers.
		DEC 	OCT 	HEX 	BIN 	Symbol 	HTML Number 	HTML Name 	Description
		0	000	00	00000000	NUL	&#000;	 	Null char
		1	001	01	00000001	SOH	&#001;	 	Start of Heading
		2	002	02	00000010	STX	&#002;	 	Start of Text
		3	003	03	00000011	ETX	&#003;	 	End of Text
		4	004	04	00000100	EOT	&#004;	 	End of Transmission
		5	005	05	00000101	ENQ	&#005;	 	Enquiry
		6	006	06	00000110	ACK	&#006;	 	Acknowledgment
		7	007	07	00000111	BEL	&#007;	 	Bell
		8	010	08	00001000	BS	&#008;	 	Back Space
		9	011	09	00001001	HT	&#009;	 	Horizontal Tab
		10	012	0A	00001010	LF	&#010;	 	Line Feed
		11	013	0B	00001011	VT	&#011;	 	Vertical Tab
		12	014	0C	00001100	FF	&#012;	 	Form Feed
		13	015	0D	00001101	CR	&#013;	 	Carriage Return
		14	016	0E	00001110	SO	&#014;	 	Shift Out / X-On
		15	017	0F	00001111	SI	&#015;	 	Shift In / X-Off
		16	020	10	00010000	DLE	&#016;	 	Data Line Escape
		17	021	11	00010001	DC1	&#017;	 	Device Control 1 (oft. XON)
		18	022	12	00010010	DC2	&#018;	 	Device Control 2
		19	023	13	00010011	DC3	&#019;	 	Device Control 3 (oft. XOFF)
		20	024	14	00010100	DC4	&#020;	 	Device Control 4
		21	025	15	00010101	NAK	&#021;	 	Negative Acknowledgement
		22	026	16	00010110	SYN	&#022;	 	Synchronous Idle
		23	027	17	00010111	ETB	&#023;	 	End of Transmit Block
		24	030	18	00011000	CAN	&#024;	 	Cancel
		25	031	19	00011001	EM	&#025;	 	End of Medium
		26	032	1A	00011010	SUB	&#026;	 	Substitute
		27	033	1B	00011011	ESC	&#027;	 	Escape
		28	034	1C	00011100	FS	&#028;	 	File Separator
		29	035	1D	00011101	GS	&#029;	 	Group Separator
		30	036	1E	00011110	RS	&#030;	 	Record Separator
		31	037	1F	00011111	US	&#031;	 	Unit Separator
		ASCII printable characters (character code 32-127)
		Codes 32-127 are common for all the different variations of the ASCII table, they are called printable characters, represent letters, digits, punctuation marks, and a few miscellaneous symbols. You will find almost every character on your keyboard. Character 127 represents the command DEL.
		DEC 	OCT 	HEX 	BIN 	Symbol 	HTML Number 	HTML Name 	Description
		32	040	20	00100000	 	&#32;	 	Space
		33	041	21	00100001	!	&#33;	 	Exclamation mark
		34	042	22	00100010	"	&#34;	&quot;	Double quotes (or speech marks)
		35	043	23	00100011	#	&#35;	 	Number
		36	044	24	00100100	$	&#36;	 	Dollar
		37	045	25	00100101	%	&#37;	 	Per cent sign
		38	046	26	00100110	&	&#38;	&amp;	Ampersand
		39	047	27	00100111	'	&#39;	 	Single quote
		40	050	28	00101000	(	&#40;	 	Open parenthesis (or open bracket)
		41	051	29	00101001	)	&#41;	 	Close parenthesis (or close bracket)
		42	052	2A	00101010	*	&#42;	 	Asterisk
		43	053	2B	00101011	+	&#43;	 	Plus
		44	054	2C	00101100	,	&#44;	 	Comma
		45	055	2D	00101101	-	&#45;	 	Hyphen
		46	056	2E	00101110	.	&#46;	 	Period, dot or full stop
		47	057	2F	00101111	/	&#47;	 	Slash or divide
		48	060	30	00110000	0	&#48;	 	Zero
		49	061	31	00110001	1	&#49;	 	One
		50	062	32	00110010	2	&#50;	 	Two
		51	063	33	00110011	3	&#51;	 	Three
		52	064	34	00110100	4	&#52;	 	Four
		53	065	35	00110101	5	&#53;	 	Five
		54	066	36	00110110	6	&#54;	 	Six
		55	067	37	00110111	7	&#55;	 	Seven
		56	070	38	00111000	8	&#56;	 	Eight
		57	071	39	00111001	9	&#57;	 	Nine
		58	072	3A	00111010	:	&#58;	 	Colon
		59	073	3B	00111011	;	&#59;	 	Semicolon
		60	074	3C	00111100	<	&#60;	&lt;	Less than (or open angled bracket)
		61	075	3D	00111101	=	&#61;	 	Equals
		62	076	3E	00111110	>	&#62;	&gt;	Greater than (or close angled bracket)
		63	077	3F	00111111	?	&#63;	 	Question mark
		64	100	40	01000000	@	&#64;	 	At symbol
		65	101	41	01000001	A	&#65;	 	Uppercase A
		66	102	42	01000010	B	&#66;	 	Uppercase B
		67	103	43	01000011	C	&#67;	 	Uppercase C
		68	104	44	01000100	D	&#68;	 	Uppercase D
		69	105	45	01000101	E	&#69;	 	Uppercase E
		70	106	46	01000110	F	&#70;	 	Uppercase F
		71	107	47	01000111	G	&#71;	 	Uppercase G
		72	110	48	01001000	H	&#72;	 	Uppercase H
		73	111	49	01001001	I	&#73;	 	Uppercase I
		74	112	4A	01001010	J	&#74;	 	Uppercase J
		75	113	4B	01001011	K	&#75;	 	Uppercase K
		76	114	4C	01001100	L	&#76;	 	Uppercase L
		77	115	4D	01001101	M	&#77;	 	Uppercase M
		78	116	4E	01001110	N	&#78;	 	Uppercase N
		79	117	4F	01001111	O	&#79;	 	Uppercase O
		80	120	50	01010000	P	&#80;	 	Uppercase P
		81	121	51	01010001	Q	&#81;	 	Uppercase Q
		82	122	52	01010010	R	&#82;	 	Uppercase R
		83	123	53	01010011	S	&#83;	 	Uppercase S
		84	124	54	01010100	T	&#84;	 	Uppercase T
		85	125	55	01010101	U	&#85;	 	Uppercase U
		86	126	56	01010110	V	&#86;	 	Uppercase V
		87	127	57	01010111	W	&#87;	 	Uppercase W
		88	130	58	01011000	X	&#88;	 	Uppercase X
		89	131	59	01011001	Y	&#89;	 	Uppercase Y
		90	132	5A	01011010	Z	&#90;	 	Uppercase Z
		91	133	5B	01011011	[	&#91;	 	Opening bracket
		92	134	5C	01011100	\	&#92;	 	Backslash
		93	135	5D	01011101	]	&#93;	 	Closing bracket
		94	136	5E	01011110	^	&#94;	 	Caret - circumflex
		95	137	5F	01011111	_	&#95;	 	Underscore
		96	140	60	01100000	`	&#96;	 	Grave accent
		97	141	61	01100001	a	&#97;	 	Lowercase a
		98	142	62	01100010	b	&#98;	 	Lowercase b
		99	143	63	01100011	c	&#99;	 	Lowercase c
		100	144	64	01100100	d	&#100;	 	Lowercase d
		101	145	65	01100101	e	&#101;	 	Lowercase e
		102	146	66	01100110	f	&#102;	 	Lowercase f
		103	147	67	01100111	g	&#103;	 	Lowercase g
		104	150	68	01101000	h	&#104;	 	Lowercase h
		105	151	69	01101001	i	&#105;	 	Lowercase i
		106	152	6A	01101010	j	&#106;	 	Lowercase j
		107	153	6B	01101011	k	&#107;	 	Lowercase k
		108	154	6C	01101100	l	&#108;	 	Lowercase l
		109	155	6D	01101101	m	&#109;	 	Lowercase m
		110	156	6E	01101110	n	&#110;	 	Lowercase n
		111	157	6F	01101111	o	&#111;	 	Lowercase o
		112	160	70	01110000	p	&#112;	 	Lowercase p
		113	161	71	01110001	q	&#113;	 	Lowercase q
		114	162	72	01110010	r	&#114;	 	Lowercase r
		115	163	73	01110011	s	&#115;	 	Lowercase s
		116	164	74	01110100	t	&#116;	 	Lowercase t
		117	165	75	01110101	u	&#117;	 	Lowercase u
		118	166	76	01110110	v	&#118;	 	Lowercase v
		119	167	77	01110111	w	&#119;	 	Lowercase w
		120	170	78	01111000	x	&#120;	 	Lowercase x
		121	171	79	01111001	y	&#121;	 	Lowercase y
		122	172	7A	01111010	z	&#122;	 	Lowercase z
		123	173	7B	01111011	{	&#123;	 	Opening brace
		124	174	7C	01111100	|	&#124;	 	Vertical bar
		125	175	7D	01111101	}	&#125;	 	Closing brace
		126	176	7E	01111110	~	&#126;	 	Equivalency sign - tilde
		127	177	7F	01111111		&#127;	 	Delete
		The extended ASCII codes (character code 128-255)
		There are several different variations of the 8-bit ASCII table. The table below is according to Windows-1252 (CP-1252) which is a superset of ISO 8859-1, also called ISO Latin-1, in terms of printable characters, but differs from the IANA's ISO-8859-1 by using displayable characters rather than control characters in the 128 to 159 range. Characters that differ from ISO-8859-1 is marked by light blue color.
		DEC 	OCT 	HEX 	BIN 	Symbol 	HTML Number 	HTML Name 	Description
		128	200	80	10000000	€	&#128;	&euro;	Euro sign
		129	201	81	10000001	 	 	 	 
		130	202	82	10000010	‚	&#130;	&sbquo;	Single low-9 quotation mark
		131	203	83	10000011	ƒ	&#131;	&fnof;	Latin small letter f with hook
		132	204	84	10000100	„	&#132;	&bdquo;	Double low-9 quotation mark
		133	205	85	10000101	…	&#133;	&hellip;	Horizontal ellipsis
		134	206	86	10000110	†	&#134;	&dagger;	Dagger
		135	207	87	10000111	‡	&#135;	&Dagger;	Double dagger
		136	210	88	10001000	ˆ	&#136;	&circ;	Modifier letter circumflex accent
		137	211	89	10001001	‰	&#137;	&permil;	Per mille sign
		138	212	8A	10001010	Š	&#138;	&Scaron;	Latin capital letter S with caron
		139	213	8B	10001011	‹	&#139;	&lsaquo;	Single left-pointing angle quotation
		140	214	8C	10001100	Œ	&#140;	&OElig;	Latin capital ligature OE
		141	215	8D	10001101	 	 	 	 
		142	216	8E	10001110	Ž	&#142;	 	Latin capital letter Z with caron
		143	217	8F	10001111	 	 	 	 
		144	220	90	10010000	 	 	 	 
		145	221	91	10010001	‘	&#145;	&lsquo;	Left single quotation mark
		146	222	92	10010010	’	&#146;	&rsquo;	Right single quotation mark
		147	223	93	10010011	“	&#147;	&ldquo;	Left double quotation mark
		148	224	94	10010100	”	&#148;	&rdquo;	Right double quotation mark
		149	225	95	10010101	•	&#149;	&bull;	Bullet
		150	226	96	10010110	–	&#150;	&ndash;	En dash
		151	227	97	10010111	—	&#151;	&mdash;	Em dash
		152	230	98	10011000	˜	&#152;	&tilde;	Small tilde
		153	231	99	10011001	™	&#153;	&trade;	Trade mark sign
		154	232	9A	10011010	š	&#154;	&scaron;	Latin small letter S with caron
		155	233	9B	10011011	›	&#155;	&rsaquo; 	Single right-pointing angle quotation mark
		156	234	9C	10011100	œ	&#156;	&oelig;	Latin small ligature oe
		157	235	9D	10011101	 	 	 	 
		158	236	9E	10011110	ž	&#158;	 	Latin small letter z with caron
		159	237	9F	10011111	Ÿ	&#159;	&Yuml;	Latin capital letter Y with diaeresis
		160	240	A0	10100000	 	&#160;	&nbsp;	Non-breaking space
		161	241	A1	10100001	¡	&#161;	&iexcl;	Inverted exclamation mark
		162	242	A2	10100010	¢	&#162;	&cent;	Cent sign
		163	243	A3	10100011	£	&#163;	&pound;	Pound sign
		164	244	A4	10100100	¤	&#164;	&curren;	Currency sign
		165	245	A5	10100101	¥	&#165;	&yen;	Yen sign
		166	246	A6	10100110	¦	&#166;	&brvbar;	Pipe, Broken vertical bar
		167	247	A7	10100111	§	&#167;	&sect;	Section sign
		168	250	A8	10101000	¨	&#168;	&uml;	Spacing diaeresis - umlaut
		169	251	A9	10101001	©	&#169;	&copy;	Copyright sign
		170	252	AA	10101010	ª	&#170;	&ordf;	Feminine ordinal indicator
		171	253	AB	10101011	«	&#171;	&laquo;	Left double angle quotes
		172	254	AC	10101100	¬	&#172;	&not;	Not sign
		173	255	AD	10101101	­	&#173;	&shy;	Soft hyphen
		174	256	AE	10101110	®	&#174;	&reg;	Registered trade mark sign
		175	257	AF	10101111	¯	&#175;	&macr;	Spacing macron - overline
		176	260	B0	10110000	°	&#176;	&deg;	Degree sign
		177	261	B1	10110001	±	&#177;	&plusmn;	Plus-or-minus sign
		178	262	B2	10110010	²	&#178;	&sup2;	Superscript two - squared
		179	263	B3	10110011	³	&#179;	&sup3;	Superscript three - cubed
		180	264	B4	10110100	´	&#180;	&acute;	Acute accent - spacing acute
		181	265	B5	10110101	µ	&#181;	&micro;	Micro sign
		182	266	B6	10110110	¶	&#182;	&para;	Pilcrow sign - paragraph sign
		183	267	B7	10110111	·	&#183;	&middot;	Middle dot - Georgian comma
		184	270	B8	10111000	¸	&#184;	&cedil;	Spacing cedilla
		185	271	B9	10111001	¹	&#185;	&sup1;	Superscript one
		186	272	BA	10111010	º	&#186;	&ordm;	Masculine ordinal indicator
		187	273	BB	10111011	»	&#187;	&raquo;	Right double angle quotes
		188	274	BC	10111100	¼	&#188;	&frac14;	Fraction one quarter
		189	275	BD	10111101	½	&#189;	&frac12;	Fraction one half
		190	276	BE	10111110	¾	&#190;	&frac34;	Fraction three quarters
		191	277	BF	10111111	¿	&#191;	&iquest;	Inverted question mark
		192	300	C0	11000000	À	&#192;	&Agrave;	Latin capital letter A with grave
		193	301	C1	11000001	Á	&#193;	&Aacute;	Latin capital letter A with acute
		194	302	C2	11000010	Â	&#194;	&Acirc;	Latin capital letter A with circumflex
		195	303	C3	11000011	Ã	&#195;	&Atilde;	Latin capital letter A with tilde
		196	304	C4	11000100	Ä	&#196;	&Auml;	Latin capital letter A with diaeresis
		197	305	C5	11000101	Å	&#197;	&Aring;	Latin capital letter A with ring above
		198	306	C6	11000110	Æ	&#198;	&AElig;	Latin capital letter AE
		199	307	C7	11000111	Ç	&#199;	&Ccedil;	Latin capital letter C with cedilla
		200	310	C8	11001000	È	&#200;	&Egrave;	Latin capital letter E with grave
		201	311	C9	11001001	É	&#201;	&Eacute;	Latin capital letter E with acute
		202	312	CA	11001010	Ê	&#202;	&Ecirc;	Latin capital letter E with circumflex
		203	313	CB	11001011	Ë	&#203;	&Euml;	Latin capital letter E with diaeresis
		204	314	CC	11001100	Ì	&#204;	&Igrave;	Latin capital letter I with grave
		205	315	CD	11001101	Í	&#205;	&Iacute;	Latin capital letter I with acute
		206	316	CE	11001110	Î	&#206;	&Icirc;	Latin capital letter I with circumflex
		207	317	CF	11001111	Ï	&#207;	&Iuml;	Latin capital letter I with diaeresis
		208	320	D0	11010000	Ð	&#208;	&ETH;	Latin capital letter ETH
		209	321	D1	11010001	Ñ	&#209;	&Ntilde;	Latin capital letter N with tilde
		210	322	D2	11010010	Ò	&#210;	&Ograve;	Latin capital letter O with grave
		211	323	D3	11010011	Ó	&#211;	&Oacute;	Latin capital letter O with acute
		212	324	D4	11010100	Ô	&#212;	&Ocirc;	Latin capital letter O with circumflex
		213	325	D5	11010101	Õ	&#213;	&Otilde;	Latin capital letter O with tilde
		214	326	D6	11010110	Ö	&#214;	&Ouml;	Latin capital letter O with diaeresis
		215	327	D7	11010111	×	&#215;	&times;	Multiplication sign
		216	330	D8	11011000	Ø	&#216;	&Oslash;	Latin capital letter O with slash
		217	331	D9	11011001	Ù	&#217;	&Ugrave;	Latin capital letter U with grave
		218	332	DA	11011010	Ú	&#218;	&Uacute;	Latin capital letter U with acute
		219	333	DB	11011011	Û	&#219;	&Ucirc;	Latin capital letter U with circumflex
		220	334	DC	11011100	Ü	&#220;	&Uuml;	Latin capital letter U with diaeresis
		221	335	DD	11011101	Ý	&#221;	&Yacute;	Latin capital letter Y with acute
		222	336	DE	11011110	Þ	&#222;	&THORN;	Latin capital letter THORN
		223	337	DF	11011111	ß	&#223;	&szlig;	Latin small letter sharp s - ess-zed
		224	340	E0	11100000	à	&#224;	&agrave;	Latin small letter a with grave
		225	341	E1	11100001	á	&#225;	&aacute;	Latin small letter a with acute
		226	342	E2	11100010	â	&#226;	&acirc;	Latin small letter a with circumflex
		227	343	E3	11100011	ã	&#227;	&atilde;	Latin small letter a with tilde
		228	344	E4	11100100	ä	&#228;	&auml;	Latin small letter a with diaeresis
		229	345	E5	11100101	å	&#229;	&aring;	Latin small letter a with ring above
		230	346	E6	11100110	æ	&#230;	&aelig;	Latin small letter ae
		231	347	E7	11100111	ç	&#231;	&ccedil;	Latin small letter c with cedilla
		232	350	E8	11101000	è	&#232;	&egrave;	Latin small letter e with grave
		233	351	E9	11101001	é	&#233;	&eacute;	Latin small letter e with acute
		234	352	EA	11101010	ê	&#234;	&ecirc;	Latin small letter e with circumflex
		235	353	EB	11101011	ë	&#235;	&euml;	Latin small letter e with diaeresis
		236	354	EC	11101100	ì	&#236;	&igrave;	Latin small letter i with grave
		237	355	ED	11101101	í	&#237;	&iacute;	Latin small letter i with acute
		238	356	EE	11101110	î	&#238;	&icirc;	Latin small letter i with circumflex
		239	357	EF	11101111	ï	&#239;	&iuml;	Latin small letter i with diaeresis
		240	360	F0	11110000	ð	&#240;	&eth;	Latin small letter eth
		241	361	F1	11110001	ñ	&#241;	&ntilde;	Latin small letter n with tilde
		242	362	F2	11110010	ò	&#242;	&ograve;	Latin small letter o with grave
		243	363	F3	11110011	ó	&#243;	&oacute;	Latin small letter o with acute
		244	364	F4	11110100	ô	&#244;	&ocirc;	Latin small letter o with circumflex
		245	365	F5	11110101	õ	&#245;	&otilde;	Latin small letter o with tilde
		246	366	F6	11110110	ö	&#246;	&ouml;	Latin small letter o with diaeresis
		247	367	F7	11110111	÷	&#247;	&divide;	Division sign
		248	370	F8	11111000	ø	&#248;	&oslash;	Latin small letter o with slash
		249	371	F9	11111001	ù	&#249;	&ugrave;	Latin small letter u with grave
		250	372	FA	11111010	ú	&#250;	&uacute;	Latin small letter u with acute
		251	373	FB	11111011	û	&#251;	&ucirc;	Latin small letter u with circumflex
		252	374	FC	11111100	ü	&#252;	&uuml;	Latin small letter u with diaeresis
		253	375	FD	11111101	ý	&#253;	&yacute;	Latin small letter y with acute
		254	376	FE	11111110	þ	&#254;	&thorn;	Latin small letter thorn
		255	377	FF	11111111	ÿ	&#255;	&yuml;	Latin small letter y with diaeresis
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
	Results:
		Everything runs as expected. There's a 100% match with original file. (Did not copy because it was too long).

